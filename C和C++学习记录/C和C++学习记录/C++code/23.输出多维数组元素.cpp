/*23. 利用for范围语句和普通for循环输出多维指针元素*/
#include <iostream>
using namespace std;

int main() {
	cout << endl << "==========下标访问二维数组" << endl;
	cout << "int arr[3][4]={1,2,3,4,5,6,7,8,9,10,11}" << endl;
	int arr[3][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

	//普通for循环和下标
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 4; j++) {
			cout << arr[i][j] << " ";
		}
	}


	cout << endl << "==========一维数组赋予整数指针" << endl;
	int arr3[3] = {1, 10, 11};
	int *p3 = arr3;//第一个整数地址赋予一个整数指针，类型大小一致，正确
	cout << endl << *p3 << endl;//解引用，输出第一个地址的值
	cout << endl << *p3 + 1 << endl;//输出 ，第一个地址的值加1

	cout << endl << p3  << endl;
	cout << endl << p3 + 1 << endl;//p3为int型，
	//一个 一个整数数组大小的 对象 占用的空间加1
	cout << endl << p3 + 2 << endl;//一个 一个个整数数组 对象占用的空间加2

	cout << endl << *p3 << endl;
	cout << endl << *(p3 + 1) << endl;//解引用
	cout << endl << *(p3 + 2) << endl;

	cout << "==========二维数组" << endl;

	int arr2[3][4] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};
	int (*p2)[4] = arr2;//二维数组的第一个数组的地址赋予一个指向四个整数数组的指针
	//赋予一个指向其他个数整数数组的指针会出错
	//因为一维数组 这个对象大小就是四个整数

	cout << endl <<  p2 << endl;//输出一维数组这个对象的地址
	cout << endl << *p2 << endl;//解引用，一维数组这个对象的地址的值，输出这个
	//一维数组，因为数组对象形式无法显示，所以输出
	//它存放的地址，这个地址在四个整数空间的头部，从值上看也是首元素的地址，上下两句输出一样

	cout << endl <<  p2 + 1 << endl;    //一个 四个整数数组 对象占用的空间加1
	cout << endl <<  *(p2 + 1) << endl;//解引用，一维数组这个对象的地址的值，输出这个
	//一维数组，因为数组对象形式无法显示，所以输出
	//它存放的地址

	cout << endl <<  p2 + 2 << endl;   //一个 四个整数数组 对象占用的空间加2
	cout << endl <<  *(p2 + 2) << endl;//解引用，一维数组这个对象的地址的值，输出这个
	//一维数组，因为数组对象形式无法显示，所以输出
	//它存放的地址


	cout << endl << "==========指针访问二维数组" << endl;

	//普通for循环和指针，注意二维数组名就是首个一维数组地址;
	//一维数组名就是首个数组元素地址
	for (int (*p)[4] = arr; p != arr + 3; p++) {
		for (int *q = *p; q != *p + 4; q++) {
			cout << *q << " ";
		}
		//for (int *q = p; q != p + 4; q++)会报错
		//p不是数组名，p指向的是一个 四个整数大小 的对象，不能赋予一个
		//一个指向 一个整数大小的对象 的指针，*p本应是一个 四个整数大小 的对象，
		//*p在此是这个对象的空间地址
		//只有数组名才能表示首个元素的地址
		//q!=*p+4;*p是一维数组对象的地址，这样才可以赋予int *q指针
		//不用用p直接赋予，大小不匹配

		//所以，指向一个对象的指针不能赋予一个大小不匹配的指针，但是
		//可以将指针解引用后赋予一个大小不匹配的指针

		//	for (int *q = *p; q != *p + 4; q++)  q++按int大小，
		//*p + 4表示下一个一维数组的地址，为什么是加4？？
		//见 ====二维数组的注释，“这个地址在四个整数空间的头部，
		//从值上看也是首元素的地址”，所以*p + 4是按首元素大小增加的
	}

	//==========引用访问二维数组？？
	//不存在，引用不可像数组一样更改,但是可以作为范围for循环中应用


	cout << endl << "==========范围for循环访问二维数组" << endl;
	for (int (&row)[4] : arr) {
		for (int &col : row ) {
			cout << col << " ";
		}
	}

	cout << endl << "==========auto范围for循环访问二维数组" << endl;
	for (auto &row : arr) { //不必考虑引用的类型
		for (auto &col : row ) {
			cout << col << " ";
		}
	}


	return 0;
}
