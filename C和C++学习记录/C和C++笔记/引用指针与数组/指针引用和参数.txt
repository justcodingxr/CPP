/*07.指针和字符指针的特殊处*/
/*常量赋给变量；形参，对象赋给引用；
对象取地址赋给指针（常量赋给变量）；
引用指针是指针存放的地址；
常量赋给变量，变量取地址赋给一级指针，一级指针取地址赋给二级指针，输出变量，
一级指针，二级指针内容都是一样的，输出他们的地址都不一样；
数组名是第一个元素取地址，引用数组是整个数组取地址；
指针解引用是解所存地址所存的值；
若a=1；*b=&a；**p=&b则p是二级指针，所存的是一级指针的地址，输出p是&b，
输出*p是&a（或者说一级指针*b），输出**p是1;

引用本身不是对象，使用引用就是使用引用的对象，引用一旦初始化后不可改，指的是不可指向其他对象；
指针是一个对象，指针初始化后还可以修改，还可以为空。
指针定义时的*就是个符号，没有什么特别，指针解引用的*具有功能。

思考，引用怎么绑定，是对象和其地址吗？对象和对象值如何区分？
暂记，内存是个客观物理体，
对象，是一个有值的实例化的概念，是有地址关联的具体的物，
引用绑定对象，绑定了地址和那块物理体，
对象值，是物理体存的内容或值。
引用是一次绑定的，不能让引用指向其他对象。引用可以赋值，对引用赋值就是对引用的对象赋值，
也就是改变的是对象的值，对象和他的地址依旧不变的和引用绑定着。

引用形参可以避免拷贝大的类对象和容器对象，引用形参与初始化它的对象是绑定的，可以操作他。

	char c[6] = "hello";
	char *p = &c[0];
	cout << *p << endl;//解引用，指针保存的首元素的地址的值
	cout << p << endl;//字符指针的特殊，不是输出首元素地址，而是整个字符串
	
	int a[3][2];
	a[0]首元素
	a数组名，也是首元素的地址，等价于&a[0]
	&a整个数组的地址
	
	
*/
#include <iostream>
using namespace std;

int main() {

	int a = 1;
	int *b = &a;
	cout << a << endl
	     cout << &a << endl;//1存的地址
	cout << b << endl;//输出指针，输出指针保存的地址
	cout << *b << endl;//解引指针保存的地址存的值
	cout << endl;

	int z[8] = {4, 3, 5, 8, 7};
	int *f = &z[0];
	cout << z[0] << endl;//首元素
	cout << &z[0] << endl;//首元素的地址
	cout << f << endl;//指针保存的首元素的地址
	cout << *f << endl;//解引用，指针保存的首元素的地址的值
	cout << &f << endl;//存放指针的地址
	cout << &f + 1 << endl << &f + 2 << endl << &f + 3 << endl;

	char c[6] = "hello";
	char *p = &c[0];
	cout << *p << endl;//解引用，指针保存的首元素的地址的值
	cout << p << endl;//字符指针的特殊，不是输出首元素地址，而是整个字符串
	cout << &p << endl;//指针保存的首元素的地址
	cout << &p + 1 << endl << &p + 2 << endl << &p + 3 << endl;


	return 0;
}
