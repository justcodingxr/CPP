局部静态变量对应局部静态对象，生命周期自定义到程序结束，定义语句生效一次

C++的begin，end函数
int *beg = begin(ia); //begin函数返回指向ia首元素的指针，end函数返回指向ia尾元素下一位置的指针。
int *last = end(ia);

void返回值类型的函数，return；可以写可以不写；会隐式执行；
中间位置使用return；相当于使用break；

含有return；的for循环下面通常也有return；

可以return列表
return {"dd","wdqd"};

内置类型变量是否自动初始化取决于变量定义的位置。
函数体外定义的变量初始成0；函数体内定义的变量不进行自动初始化。

string会默认初始化，它实际是类；

int （*p）[10];指向10整数的数组指针
int *p[10];存有10个int *指针的数组
因为数组无法被拷贝，所以函数不能返回数组，但是可以返回数组指针或引用

定义数组指针的另一个方法，类型别名：
typedef int arr[20];
using arr=int[10];
arr *func();//返回的就是 int （*p）[10]

七、类
this
成员函数可以通过this隐式参数来访问调用它的那个对象，就是说哪个对象调用成员函数，
成员函数就可以反过来用this访问这个对象；
return *this;//返回调用该函数的对象
对类成员函数的直接访问可以看作 this->成员

常量成员函数：
在函数参数列表后面加const，修饰隐式this，
表示this是一个指向常量的指针，也就表示这个成员函数不可修改this指向的对象

一般作为借口的一部分，构造函数和部分成员函数紧跟在public之后
数据成员和和作为实现部分的函数跟在private之后。

class默认私有，struct默认公有；权限都可以有多个

封装确保用户代码不会无意间破坏对象的状态
且对一实现细节的部分可以灵活改变，无需调整用户级的代码

友元，使得 类 的 非成员函数接口 拥有类的所有成员访问权限，
友元声明必须在类内，真正的友元函数声明还要写一次，
通常将友元函数的声明和类的定义放在一个头文件；


class A a；
A a；两种方式都行

类内的成员函数和友元函数都是隐式内联的

include<sstream>
istringstream
//string转换为io流对象,>>会自动分割为单词语
		istringstream in(s);
		string str;
		while(in>>str){
			mp1[s].push_back(line);
		}


























