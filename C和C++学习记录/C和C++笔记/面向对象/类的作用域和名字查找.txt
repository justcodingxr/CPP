类外成员函数名字被隐藏，要提供类名：：，一旦遇到类名，形参列表和函数体等就都可见了，
可以在类外函数体直接使用函数成员；
函数返回类型出现在名字之前，若返回类型出现了在类作用域之外的，要指出类。


名字查找一般规则
1.在名字所在块中寻找声明语句，只考虑出现在名字之前的声明
2.如果没找到，继续查找外层作用域

类查找有区别
一个类就是一个作用域，特殊在于 先编译成员声明，直到类全部可见才编译  函数体
注意说的是函数体，对于函数的声明中的 返回类型和参数列表 都必须在之前确保可见，
没有先看见整个类的再处理的特殊规则。

成员函数定义在类内
如：
	typedef double Money；
	string bal；
	class Account{
	public：
		Money balance（）{return bal；}
	private：
		Money bal；
		//...
		}
		
	看到balance函数时，名字之前类内没有出现Money，
	会直接去外层，发现typedef double Money，           （如果偏要先找private的Money，用this.Money，或Account::Money)
	接着看到private中的Money bal，                     （先找的Money，路过的string bal不会看见）
	最后处理balance函数体，                             （处理之前，内类声明都可见）
	return 类内的 bal成员而不是外层的 string bal，
	因为处理函数体之前，类内的所有声明先可见，这样函数体不必
	按照一般查找规则：类内之前找不到则去外层找。

成员函数定义在类外
成员函数定义在类外时，如果在类内找不到  函数块作用域用到的名字，
则在类外函数定义之前，类定义之前的全局作用域中查找，因为不确定函数定义在类之前还是之后。





总结：
一、一般规则，由内向外查找之前
二、特殊规则，类内函数体的处理之前确保整个类可见；
	对于函数的声明中的 返回类型和参数列表 不可用，他们遵守一般规则
三、函数定定义在类外的
	先按规则一，规则二类内查找；类外查找时，类之前和函数定义之前都可见
四、破坏规则
	this和class ::